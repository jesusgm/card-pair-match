{"version":3,"sources":["card-pair-game/assets/audio/flip.wav","card-pair-game/assets/audio/victory.wav","card-pair-game/assets/audio/match.wav","card-pair-game/assets/audio/gameOver.wav","card-pair-game/components/icon/index.jsx","card-pair-game/components/card/index.jsx","card-pair-game/index.jsx","card-pair-game/audio-controller.js","serviceWorker.js","index.js"],"names":["module","exports","Icon","font","name","brand","spin","size","pulse","className","defaultProps","Card","timer","props","value","visible","matched","color","onFlip","onClick","style","AudioController","this","flipSound","Audio","flip","victorySound","victory","matchSound","match","gameOverSound","gameover","play","NUMBER_OF_CARDS","symbols","length","CardPairGame","useState","cards","setCards","cardToCheck","setCardToCheck","matchedCards","setMatchedCards","bussy","setBussy","flips","setFlips","timeLeft","setTimeLeft","showStart","setShowStart","showGameOver","setShowGameOver","showVictory","setShowVictory","audio","shuffle","array","map","a","sort","Math","random","b","startGame","localTimeLeft","setInterval","console","log","gameOver","clearInterval","updateTimeLeft","addCards","cardsToAdd","symbolCounter","randomSymbols","i","push","icon","c","index","id","useEffect","card","key","some","ck","mc","setTimeout","flipCard","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82001e9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flip.5cd371c1.wav\";","module.exports = __webpack_public_path__ + \"static/media/victory.fcab41c3.wav\";","module.exports = __webpack_public_path__ + \"static/media/match.7ffc3cb0.wav\";","module.exports = __webpack_public_path__ + \"static/media/gameOver.f768a2ef.wav\";","import React from \"react\";\nimport \"./font-awesome/css/all.min.css\";\nimport \"./line-awesome/css/line-awesome.min.css\";\n\nfunction Icon({ font, name, brand, spin, size, pulse, className }) {\n  return (\n    <span\n      className={`icon ${spin ? \"fa-spin\" : \"\"} ${pulse ? \"fa-pulse\" : \"\"} ${\n        brand ? \"fab\" : \"fa\"\n      } ${size ? `fa-${size}` : \"\"} ${font}-${name} ${className}`}\n    />\n  );\n}\n\nIcon.defaultProps = {\n  font: \"fa\",\n  brand: false,\n  spin: false,\n  pulse: false,\n  size: \"\",\n  className: \"\"\n};\n\nexport default Icon;\n","import React from \"react\";\nimport Icon from \"../icon\";\nimport \"./styles.css\";\n\nfunction Card(props) {\n  const { value, visible, matched, color, onFlip } = props;\n\n  return (\n    <div\n      className={`card ${visible ? \"visible\" : \"\"} ${matched ? \"matched\" : \"\"}`}\n      onClick={() => onFlip()}\n    >\n      <div className=\"card-face card-front\">\n        <span style={{ color: color }}>\n          <Icon name={value} />\n        </span>\n      </div>\n      <div className=\"card-face  card-back\">\n        <Icon name=\"question\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./components/card\";\nimport symbols from \"./symbols.json\";\nimport AudioController from \"./audio-controller\";\nimport \"./styles.css\";\n\nconst NUMBER_OF_CARDS = symbols.length * 2;\nconst TIME_TO_PLAY = 150;\n\nlet timer;\n\nfunction CardPairGame() {\n  const [cards, setCards] = useState([]);\n  const [cardToCheck, setCardToCheck] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [bussy, setBussy] = useState(false);\n  const [flips, setFlips] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(TIME_TO_PLAY);\n  const [showStart, setShowStart] = useState(true);\n  const [showGameOver, setShowGameOver] = useState(false);\n  const [showVictory, setShowVictory] = useState(false);\n  const audio = new AudioController();\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => addCards(), []);\n\n  useEffect(() => {\n    if (cards.length === matchedCards.length && matchedCards.length !== 0) {\n      clearInterval(timer);\n      setShowVictory(true);\n      audio.victory();\n    }\n  }, [cards, matchedCards, audio]);\n\n  function shuffle(array) {\n    return array\n      .map((a) => ({ sort: Math.random(), value: a }))\n      .sort((a, b) => a.sort - b.sort)\n      .map((a) => a.value);\n  }\n\n  function startGame() {\n    setMatchedCards([]);\n    setCardToCheck([]);\n    setFlips(0);\n    setTimeLeft(0);\n    setTimeLeft(TIME_TO_PLAY);\n    let localTimeLeft = TIME_TO_PLAY;\n    timer = setInterval(() => {\n      updateTimeLeft(localTimeLeft);\n      localTimeLeft--;\n    }, 1000);\n\n    addCards();\n  }\n\n  function addCards() {\n    const cardsToAdd = [];\n    let symbolCounter = 0;\n    const randomSymbols = shuffle(symbols);\n    for (let i = 0; i < NUMBER_OF_CARDS; i += 2) {\n      cardsToAdd.push({\n        value: randomSymbols[symbolCounter].icon,\n        color: randomSymbols[symbolCounter].color,\n      });\n\n      cardsToAdd.push({\n        value: randomSymbols[symbolCounter].icon,\n        color: randomSymbols[symbolCounter].color,\n      });\n\n      symbolCounter++;\n    }\n\n    setCards(shuffle(cardsToAdd.map((c, index) => ({ ...c, id: index }))));\n  }\n\n  function updateTimeLeft(timeLeft) {\n    console.log(timeLeft);\n    if (timeLeft === 0) {\n      setShowGameOver(true);\n      audio.gameOver();\n      clearInterval(timer);\n    } else {\n      setTimeLeft(timeLeft - 1);\n    }\n  }\n\n  function flipCard(card) {\n    if (bussy) return;\n    audio.flip();\n    if (cardToCheck.length === 0) {\n      setCardToCheck([card]);\n      setCards(\n        cards.map((c) => {\n          if (c.id === card.id) {\n            return { ...c, visible: true };\n          } else {\n            return c;\n          }\n        })\n      );\n    } else {\n      setBussy(true);\n      setCardToCheck([...cardToCheck, card]);\n      setTimeout(() => {\n        if (\n          cardToCheck[0].id !== card.id &&\n          cardToCheck[0].value === card.value\n        ) {\n          setMatchedCards([...matchedCards, cardToCheck[0], card]);\n          setCardToCheck([]);\n          audio.match();\n        } else {\n          setCardToCheck([]);\n        }\n        setBussy(false);\n        setFlips(flips + 1);\n      }, 600);\n    }\n  }\n\n  return (\n    <div className=\"card-pair-game-container\">\n      <div className=\"title\">Match the cards!!!</div>\n      <div className=\"game-info\">\n        <div className=\"time-left\">Time left: {timeLeft}s</div>\n        <div className=\"flips\">Flips: {flips}</div>\n      </div>\n      <div className=\"cards-container\">\n        {cards &&\n          cards.map((card) => {\n            return (\n              <Card\n                key={card.id}\n                {...card}\n                visible={\n                  cardToCheck.some((ck) => ck.id === card.id) ||\n                  matchedCards.some((mc) => mc.id === card.id)\n                }\n                onFlip={() => flipCard({ ...card })}\n              />\n            );\n          })}\n      </div>\n      <div\n        className={`overlay-text ${showStart ? \"visible\" : \"\"}`}\n        onClick={() => {\n          setShowStart(false);\n          startGame();\n        }}\n      >\n        Click to Start\n      </div>\n      <div\n        className={`overlay-text ${showGameOver ? \"visible\" : \"\"}`}\n        onClick={() => {\n          setShowGameOver(false);\n          startGame();\n        }}\n      >\n        GAME OVER\n        <span className=\"overlay-text-small\">Click to Restart</span>\n      </div>\n      <div\n        className={`overlay-text ${showVictory ? \"visible\" : \"\"}`}\n        onClick={() => {\n          setShowVictory(false);\n          startGame();\n        }}\n      >\n        VICTORY\n        <span className=\"overlay-text-small\">Click to Restart</span>\n      </div>\n    </div>\n  );\n}\n\nexport default CardPairGame;\n","import flip from \"./assets/audio/flip.wav\";\nimport victory from \"./assets/audio/victory.wav\";\nimport match from \"./assets/audio/match.wav\";\nimport gameover from \"./assets/audio/gameOver.wav\";\n\nclass AudioController {\n    constructor() {\n        this.flipSound = new Audio(flip);\n        this.victorySound = new Audio(victory);\n        this.matchSound = new Audio(match);\n        this.gameOverSound = new Audio(gameover);\n    }\n\n    flip() {\n        this.flipSound.play();\n    }\n\n    victory() {\n        this.victorySound.play();\n    }\n\n    match() {\n        this.matchSound.play();\n    }\n\n    gameOver() {\n        this.gameOverSound.play();\n    }\n}\n\nexport default AudioController;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport CardPairGame from \"./card-pair-game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CardPairGame />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}